#!/bin/bash

# DISTRIBUTED BY ANSIBLE

# tend_storage

# This program is free software. It comes without any warranty, to the extent
# permitted by applicable law. You can redistribute it and/or modify it under
# the terms of the Do What The Fuck You Want To Public License, Version 2, as
# published by Sam Hocevar. See WTFPL.txt or http://www.wtfpl.net/ for more
# details.


# Launch this script from cron.  Invoke as 's' (symlink) to supply the pass
# phrase yourself.
#
# This script will create a ramdisk if necessary, attempt to populate it with
# the storage pass phrase, and mount storage if possible.


                ESCROW_USER="{{ escrow_user }}"
     RAMFS_MOUNT_POINT="{{ storage_password_mount_point }}"
  TRANSMISSION_STORAGE="{{ hostvars[groups['transmission'][0]]['encrypted_storage'][0]['mount_point']}}"
 PASS_PHRASE_FILE_NAME='pass_phrase.txt'
 PASS_PHRASE_FILE_PATH="{{ storage_password_path }}"
  INIT_STORAGE_COMMAND='s'
 GET_PASS_ONLY_COMMAND='p'
       ERR_MKDIR_RAMFS=1
       ERR_MOUNT_RAMFS=2
       ERR_CHOWN_RAMFS=3
               ERR_SCP=4
        ERR_CHOWN_FILE=5
        ERR_CHMOD_FILE=6
     ERR_MOUNT_STORAGE=7
       ERR_PASS_PHRASE=8
          ERR_LUKSOPEN=9
             ERR_MOUNT=10
             ERR_TRANS=11


fail() {
  echo -e "ERROR: ${2}" >&2
  exit $1
}


# buddy up
buddies=()
for buddy in {{ groups['escrow']|join(' ') }}; do
  if test $buddy = $(hostname); then
    continue
  fi
  buddies+=($buddy)
done

# mount ramdisk
if ! mount | grep -q " $RAMFS_MOUNT_POINT "; then
  sudo -u $ESCROW_USER mkdir -p $RAMFS_MOUNT_POINT \
    || fail $ERR_MKDIR_RAMFS "Failed to mkdir ${RAMFS_MOUNT_POINT}."

  mount -t ramfs -o size=100m ramfs $RAMFS_MOUNT_POINT \
    || fail $ERR_MOUNT_RAMFS "Failed to mount ${RAMFS_MOUNT_POINT}."

  chown -R $ESCROW_USER $RAMFS_MOUNT_POINT \
    || fail $ERR_CHOWN_RAMFS "Failed to chown ${RAMFS_MOUNT_POINT}."
fi

# check network
if ! ip route | grep -q .; then
  sleep 30
fi

# copy passphrase
if test ! -e "${PASS_PHRASE_FILE_PATH}"; then
  for buddy in ${buddies[@]}; do
    if 
      ssh $ESCROW_USER@$buddy test -e "'${PASS_PHRASE_FILE_PATH}'"
    then
      scp $ESCROW_USER@$buddy:"${PASS_PHRASE_FILE_PATH}" $PASS_PHRASE_FILE_PATH \
        || fail $ERR_SCP "Failed to scp ${PASS_PHRASE_FILE_PATH}."
      chown $ESCROW_USER $PASS_PHRASE_FILE_PATH \
        || fail $ERR_CHOWN_FILE "Failed to chown ${PASS_PHRASE_FILE_PATH}."
      chmod 0400 $PASS_PHRASE_FILE_PATH \
        || fail $ERR_CHMOD_FILE "Failed to chmod ${PASS_PHRASE_FILE_PATH}."
      break
    fi
  done
fi

# get passphrase from user
if 
  test ! -e "${PASS_PHRASE_FILE_PATH}" \
  && test $INIT_STORAGE_COMMAND = $(echo $0 | sed 's/.*\///g')
then
  read -s -p 'Enter pass phrase:  ' pass_phrase
  echo
  echo -n $pass_phrase > $PASS_PHRASE_FILE_PATH
  unset pass_phrase
fi
  
if ! test -e "${PASS_PHRASE_FILE_PATH}"; then
  fail $ERR_PASS_PHRASE "Failed to obtain pass phrase."
fi


{% if encrypted_storage is defined %}
if ! test $GET_PASS_ONLY_COMMAND = $(echo $0 | sed 's/.*\///g'); then
{% for item in encrypted_storage %}
  if ! test -e "/dev/mapper/{{ item.name }}"; then
    /sbin/cryptsetup luksOpen "{{ item.backing_device }}" "{{ item.name }}" < "${PASS_PHRASE_FILE_PATH}" \
      || fail $ERR_LUKSOPEN "Failed to luksOpen:  {{ item.backing_device }} as {{ item.name }}"
  fi
  if ! mount | grep -q " {{ item.mount_point }} "; then
    /bin/mount "/dev/mapper/{{ item.name }}" "/{{ item.mount_point }}" \
      || fail $ERR_MOUNT "Failed to mount:  /{{ item.mount_point }}"
  fi
{% endfor %}
fi
{% endif %}


for service in openvpn transmission-daemon; do
  if 
    test -e /etc/init.d/"${service}" \
    && mount | grep -q " $TRANSMISSION_STORAGE "
  then
    PATH=/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/bin:/sbin /usr/sbin/service "${service}" start || fail $ERR_TRANS "Failed to start service:  ${service}"
  fi
done

if 
  test -e /etc/init.d/motion
then
  PATH=/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/bin:/sbin /usr/sbin/service motion restart || fail $ERR_TRANS "Failed to restart service:  motion"
fi
